// SPDX-License-Identifier: MIT
/**
 * Copyright © 2024  Frictionless Group Holdings S.à.r.l
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy of the Frictionless protocol smart contracts
 * (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy,
 * modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice (including the next paragraph) shall be included in all copies
 * or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
 * WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL FRICTIONLESS GROUP
 * HOLDINGS S.à.r.l OR AN OF ITS SUBSIDIARIES BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
 * TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 *
 */
pragma solidity ^0.8.19;

/**
 * @title IAbstractFeeModule - Interface for the calculation of fees and getting the fee info for conversion and transfers.
 * @author Frictionless Group Holdings S.à.r.l
 */
interface IAbstractFeeModule {
    /**
     * @dev Struct which defines the FeeInfo, representing the fee in basis points and the recipient of the fees on-chain.
     * @param feeInBps the fee in basis points for the transaction.
     * @param feeRecipientAddr the address of the reciever of the fees in the transaction.
     */
    struct FeeInfo {
        uint256 feeInBps;
        address feeRecipientAddr;
    }

    /// @dev Event emitted during `_setTokenFee`
    event FrictionlessFeeSet(bytes32 indexed feeKey, FeeInfo feeInfo);

    /// @dev error thrown if the recipient is a zero address
    error AbstractFeeModuleInvalidFeeRecipient();

    /// @dev error thrown if the feesInBps is outside the valid range
    error AbstractFeeModuleInvalidFee(uint256 feeInBps);

    /**
     * @dev get the FeeInfo for a given key.
     * @param feeKey_ the key as generated by the function `getTokenFeeKey`
     * @return FeeInfo the fees associated with a token transfer.
     */
    function getFeeInfo(bytes32 feeKey_) external view returns (FeeInfo memory);

    /**
     * @dev get the feeInBps value for a given key
     * @param tokenFeeKey_ the key as generated by the function `getTokenFeeKey`
     * @return the feeInBps value
     */
    function getFeeInBps(bytes32 tokenFeeKey_) external view returns (uint256);

    /**
     * @dev get the feeRecipientAddr value for a given key
     * @param tokenFeeKey_ the key as generated by the function `getTokenFeeKey`
     * @return the feeRecipientAddr value
     */
    function getFeeRecipient(bytes32 tokenFeeKey_) external view returns (address);

    /**
     * @dev Calculates the actual fee in absolute terms for a given fee in basis points.
     * @param tokensAmount_ the amount of tokens used to determine the base calculation.
     * @param feeInBps_ the fee in basis points for calculation.
     * @return feeAmount_  the actual fee in absolute terms for a given fee in basis points.
     */
    function calculateFeeAmount(uint256 tokensAmount_, uint256 feeInBps_) external pure returns (uint256 feeAmount_);
}